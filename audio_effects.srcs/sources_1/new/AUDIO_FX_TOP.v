`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// AY1718 Sem 1 EE2020 Project
// Project Name: Audio Effects
// Module Name: AUDIO_FX_TOP
// Team No.: 
// Student Names:
// Matric No.:
// Description: 
// 
// Work Distribution:
//////////////////////////////////////////////////////////////////////////////////

module AUDIO_FX_TOP(
    input CLK,                // 100MHz FPGA clock
    input [3:0] NOTE_SWITCH,   // Switches for tones
    input NOTE_MUSIC_SWITCH,    // Switch for music
    input MELODY_MUSIC_SWITCH,   // Switch for melody
    input[1:0] HELLO_SWITCH,    // Switch for hello sample
    input VOL_CONTROL, // Switch to determine type of volume control output sound vs Input sound
    input [3:0] MIC_IN_DELAY_SWITCH, //Switch for Mic in delay
    input VOL_CONTROL_INC, //Switch to increase volume 
    input VOL_CONTROL_DEC, // Switch to decrease volume
    input SHOW_MIC_IN,    // Shows MIC In input 
    input  J_MIC3_PIN3,   // PmodMIC3 audio input data (serial)
    output J_MIC3_PIN1,   // PmodMIC3 chip select, 20kHz sampling clock
    output J_MIC3_PIN4,   // PmodMIC3 serial clock (generated by module SPI.v)
    output J_DA2_PIN1,    // PmodDA2 sampling clock (generated by module DA2RefComp.vhd)
    output J_DA2_PIN2,    // PmodDA2 Data_A, 12-bit speaker output (generated by module DA2RefComp.vhd)
    output J_DA2_PIN3,    // PmodDA2 Data_B, not used (generated by module DA2RefComp.vhd)
    output J_DA2_PIN4,    // PmodDA2 serial clock, 50MHz clock
    output [15:0] LED,
    output [3:0] DIGITS,  // each of the 4 digits in 7-segment LED display
    output [6:0] SEGMENTS // the segments within each digit of the 7-segment LED display
    );

    //////////////////////////////////////////////////////////////////////////////////
    // Clock Divider Module: Generate necessary clocks from 100MHz FPGA CLK
    // Please create the clock divider module and instantiate it here.
    wire clk_20k;
    wire clk_50M;
    
    clk_divider slw_clk_20k(CLK, 2499, clk_20k);
    clk_divider slw_clk_50M(CLK, 0, clk_50M);
    
    //////////////////////////////////////////////////////////////////////////////////
    // SPI Module: Converting serial data into a 12-bit parallel register
    // Do not change the codes in this area
    wire [11:0] MIC_in;
     
    SPI u1 (CLK, clk_20k, J_MIC3_PIN3, J_MIC3_PIN1, J_MIC3_PIN4, MIC_in); 
    
    /////////////////////////////////////////////////////////////////////////////////////
    // Volume Indicator
    wire [6:0] PEAK;
    wire [11:0] VOL_LED;
    
    Volume_Indicator_Chooser volume_indicator(speaker_out, MIC_in, VOL_CONTROL, CLK, PEAK, VOL_LED);
    Bcd_Display bcd_display(CLK, PEAK, DIGITS, SEGMENTS);
    
    /////////////////////////////////////////////////////////////////////////////////////
    // Real-time Audio Effect Features  
    wire [11:0] note_out; // Note sound output
    wire [3:0] note_LED; // Note switch's LED status
    
    wire [11:0] note_music_out; // Note music current output
    wire [4:0] note_music_LED; // Note music's LED status
    
    wire [11:0] melody_music_out; // Melody music output
    wire [5:0] melody_music_LED; // Melody music's LED status
    
    wire [12:0] hello_sample_out; // Hello sample output
    wire [7:0] hello_sample_LED; // Hello LED status based on audio playback speed
    
    
    wire [11:0] MIC_in_delay;    // MIC output after delay
    wire [11:0] MIC_in_delay_LED; // MIC output delay LED
    
    note_sound note_sound (NOTE_SWITCH, CLK, note_out, note_LED);
    note_music note_music (NOTE_MUSIC_SWITCH, CLK, note_music_out, note_music_LED);
    melody_music melody_music (MELODY_MUSIC_SWITCH, CLK, melody_music_out, melody_music_LED);
    hello_audio hello_sample (HELLO_SWITCH, CLK, hello_sample_out, hello_sample_LED);
    MIC_delay MIC_delay (MIC_IN_DELAY_SWITCH, CLK, MIC_in, MIC_in_delay, MIC_in_delay_LED);
    
    wire [11:0] speaker_out; // Speaker sound output to be used in DA2RefComp 
                        // Decrease volume
    assign speaker_out = (VOL_CONTROL_INC == 0 && VOL_CONTROL_DEC == 1)? ((NOTE_SWITCH == 0 && NOTE_MUSIC_SWITCH == 0 && MELODY_MUSIC_SWITCH == 0 && HELLO_SWITCH == 0 && MIC_IN_DELAY_SWITCH == 0) ? (MIC_in >> 2) 
                      : ((NOTE_SWITCH == 0 && NOTE_MUSIC_SWITCH == 0 && MELODY_MUSIC_SWITCH == 0 && HELLO_SWITCH == 0 && MIC_IN_DELAY_SWITCH >= 1) ? (MIC_in_delay >> 2)
                      : ((NOTE_SWITCH == 0 && NOTE_MUSIC_SWITCH == 0 && MELODY_MUSIC_SWITCH == 0 && HELLO_SWITCH >= 1 && MIC_IN_DELAY_SWITCH == 0) ? (hello_sample_out >> 2)
                      : ((NOTE_SWITCH == 0 && NOTE_MUSIC_SWITCH == 0 && MELODY_MUSIC_SWITCH == 1 && HELLO_SWITCH == 0 && MIC_IN_DELAY_SWITCH == 0) ? (melody_music_out << 2)
                      : ((NOTE_SWITCH == 0 && NOTE_MUSIC_SWITCH == 1 && MELODY_MUSIC_SWITCH == 0 && HELLO_SWITCH == 0 && MIC_IN_DELAY_SWITCH == 0) ? (note_music_out << 2)
                      : ((NOTE_SWITCH >= 1 && NOTE_MUSIC_SWITCH == 0 && MELODY_MUSIC_SWITCH == 0 && HELLO_SWITCH == 0 && MIC_IN_DELAY_SWITCH == 0) ? (note_out << 2)
                      : 0)))))) // Increase volume
                      : ((VOL_CONTROL_INC == 1 && VOL_CONTROL_DEC == 0)? ((NOTE_SWITCH == 0 && NOTE_MUSIC_SWITCH == 0 && MELODY_MUSIC_SWITCH == 0 && HELLO_SWITCH == 0 && MIC_IN_DELAY_SWITCH == 0) ? MIC_in 
                      : ((NOTE_SWITCH == 0 && NOTE_MUSIC_SWITCH == 0 && MELODY_MUSIC_SWITCH == 0 && HELLO_SWITCH == 0 && MIC_IN_DELAY_SWITCH >= 1) ? MIC_in_delay
                      : ((NOTE_SWITCH == 0 && NOTE_MUSIC_SWITCH == 0 && MELODY_MUSIC_SWITCH == 0 && HELLO_SWITCH >= 1 && MIC_IN_DELAY_SWITCH == 0) ? hello_sample_out
                      : ((NOTE_SWITCH == 0 && NOTE_MUSIC_SWITCH == 0 && MELODY_MUSIC_SWITCH == 1 && HELLO_SWITCH == 0 && MIC_IN_DELAY_SWITCH == 0) ? (melody_music_out << 6)
                      : ((NOTE_SWITCH == 0 && NOTE_MUSIC_SWITCH == 1 && MELODY_MUSIC_SWITCH == 0 && HELLO_SWITCH == 0 && MIC_IN_DELAY_SWITCH == 0) ? (note_music_out << 6)
                      : ((NOTE_SWITCH >=1 && NOTE_MUSIC_SWITCH == 0 && MELODY_MUSIC_SWITCH == 0 && HELLO_SWITCH == 0 && MIC_IN_DELAY_SWITCH == 0) ? (note_out << 6)
                      : 0)))))) // Volume is normal
                      : ((NOTE_SWITCH == 0 && NOTE_MUSIC_SWITCH == 0 && MELODY_MUSIC_SWITCH == 0 && HELLO_SWITCH == 0 && MIC_IN_DELAY_SWITCH == 0) ? (MIC_in >> 1)
                      : ((NOTE_SWITCH == 0 && NOTE_MUSIC_SWITCH == 0 && MELODY_MUSIC_SWITCH == 0 && HELLO_SWITCH == 0 && MIC_IN_DELAY_SWITCH >= 1) ? (MIC_in_delay >> 1)
                      : ((NOTE_SWITCH == 0 && NOTE_MUSIC_SWITCH == 0 && MELODY_MUSIC_SWITCH == 0 && HELLO_SWITCH >= 1 && MIC_IN_DELAY_SWITCH == 0) ? (hello_sample_out >> 1) 
                      : ((NOTE_SWITCH == 0 && NOTE_MUSIC_SWITCH == 0 && MELODY_MUSIC_SWITCH == 1 && HELLO_SWITCH == 0 && MIC_IN_DELAY_SWITCH == 0) ? (melody_music_out << 4)
                      : ((NOTE_SWITCH == 0 && NOTE_MUSIC_SWITCH == 1 && MELODY_MUSIC_SWITCH == 0 && HELLO_SWITCH == 0 && MIC_IN_DELAY_SWITCH == 0) ? (note_music_out << 4)
                      : ((NOTE_SWITCH >= 1 && NOTE_MUSIC_SWITCH == 0 && MELODY_MUSIC_SWITCH == 0 && HELLO_SWITCH == 0 && MIC_IN_DELAY_SWITCH == 0) ? (note_out << 4)
                      : 0)))))));
    /////////////////////////////////////////////////////////////////////////////////////
    //DAC Module: Digital-to-Analog Conversion       
    DA2RefComp u2 (clk_50M, clk_20k, speaker_out, ,1'b0, J_DA2_PIN2, J_DA2_PIN3, J_DA2_PIN4, J_DA2_PIN1,);  
    
    //////////////////////////////////////////////////////////////////////////////////
    assign LED[11:0] = (NOTE_SWITCH == 0 && NOTE_MUSIC_SWITCH == 0 && MELODY_MUSIC_SWITCH == 0 && HELLO_SWITCH == 0 && MIC_IN_DELAY_SWITCH == 0 && SHOW_MIC_IN == 0) ? VOL_LED 
              : ((NOTE_SWITCH == 0 && NOTE_MUSIC_SWITCH == 0 && MELODY_MUSIC_SWITCH == 0 && HELLO_SWITCH == 0 &&  MIC_IN_DELAY_SWITCH == 0 && SHOW_MIC_IN == 1) ? MIC_in 
              : ((NOTE_SWITCH == 0 && NOTE_MUSIC_SWITCH == 0 && MELODY_MUSIC_SWITCH == 0 && HELLO_SWITCH == 0 && MIC_IN_DELAY_SWITCH >= 1) ? MIC_in_delay_LED
              : ((NOTE_SWITCH == 0 && NOTE_MUSIC_SWITCH == 0 && MELODY_MUSIC_SWITCH == 0 && HELLO_SWITCH >= 1 && MIC_IN_DELAY_SWITCH == 0) ? hello_sample_LED
              : ((NOTE_SWITCH == 0 && NOTE_MUSIC_SWITCH == 0 && MELODY_MUSIC_SWITCH == 1 && HELLO_SWITCH == 0 && MIC_IN_DELAY_SWITCH == 0) ? (melody_music_LED+6'b100000)
              : ((NOTE_SWITCH == 0 && NOTE_MUSIC_SWITCH == 1 && MELODY_MUSIC_SWITCH == 0 && HELLO_SWITCH == 0 && MIC_IN_DELAY_SWITCH == 0) ? (note_music_LED+5'b10000)
              : ((NOTE_SWITCH >= 1 && NOTE_MUSIC_SWITCH == 0 && MELODY_MUSIC_SWITCH == 0 && HELLO_SWITCH == 0 && MIC_IN_DELAY_SWITCH == 0) ? note_LED
              : 0))))));
    assign LED[12] = VOL_CONTROL_DEC;
    assign LED[13] = VOL_CONTROL_INC;
    assign LED[14] = VOL_CONTROL;
    assign LED[15] = SHOW_MIC_IN;
endmodule

