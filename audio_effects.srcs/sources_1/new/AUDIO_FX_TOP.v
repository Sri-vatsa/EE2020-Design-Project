`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// AY1718 Sem 1 EE2020 Project
// Project Name: Audio Effects
// Module Name: AUDIO_FX_TOP
// Team No.: 
// Student Names: Ong Wei Kang
// Matric No.: A0155920H
// Description: 
// 
// Work Distribution:
//////////////////////////////////////////////////////////////////////////////////

module AUDIO_FX_TOP(
    input CLK,            // 100MHz FPGA clock
    input [3:0] NOTESWITCH,   // Switches for tones
    input MUSICSWITCH,
    input  J_MIC3_PIN3,   // PmodMIC3 audio input data (serial)
    output J_MIC3_PIN1,   // PmodMIC3 chip select, 20kHz sampling clock
    output J_MIC3_PIN4,   // PmodMIC3 serial clock (generated by module SPI.v)
    output J_DA2_PIN1,    // PmodDA2 sampling clock (generated by module DA2RefComp.vhd)
    output J_DA2_PIN2,    // PmodDA2 Data_A, 12-bit speaker output (generated by module DA2RefComp.vhd)
    output J_DA2_PIN3,    // PmodDA2 Data_B, not used (generated by module DA2RefComp.vhd)
    output J_DA2_PIN4,     // PmodDA2 serial clock, 50MHz clock
    output [11:0] LED
    );

    //////////////////////////////////////////////////////////////////////////////////
    // Clock Divider Module: Generate necessary clocks from 100MHz FPGA CLK
    // Please create the clock divider module and instantiate it here.
    wire clk_20k;
    wire clk_50M;
    
    clk_divider slw_clk_20k(CLK, 2499, clk_20k);
    clk_divider slw_clk_50M(CLK, 0, clk_50M);
    //////////////////////////////////////////////////////////////////////////////////
    // SPI Module: Converting serial data into a 12-bit parallel register
    // Do not change the codes in this area
    wire [11:0]MIC_in;
     
    SPI u1 (CLK, clk_20k, J_MIC3_PIN3, J_MIC3_PIN1, J_MIC3_PIN4, MIC_in); 
    /////////////////////////////////////////////////////////////////////////////////////
    // Real-time Audio Effect Features
    // Please create modules to implement different features and instantiate them here   
    wire [23:0] note_freq; // Note's count 
    wire [3:0] note_LED; // Note switch's LED
    wire [11:0] note_out; // Note sound output to be used in DA2RefComp
    
    wire [3:0] note_music_switch; // Music's current note
    wire [23:0] note_music_freq; // Music's current frequency
    wire[3:0] note_music_LED; // Music's current LED status
    wire[11:0] note_music_out; // Music's current sound output to be used in DA2RefComp
    
    wire [11:0] speaker_out; // Speaker sound output to be used in DA2RefComp
    
    note_sound note_sound1(NOTESWITCH, note_freq, note_LED);
    clk_divider slw_clk_note(CLK, note_freq, note_out); 
    
    note_music note_music(CLK, MUSICSWITCH, note_music_switch);
    note_sound note_sound2(note_music_switch, note_music_freq, note_music_LED);
    clk_divider slw_clk_music(CLK, note_music_freq, note_music_out); 
    
    assign speaker_out = (NOTESWITCH == 0 && MUSICSWITCH == 0)? MIC_in : ((NOTESWITCH == 0)? note_music_out: note_out);
    /////////////////////////////////////////////////////////////////////////////////////
    //DAC Module: Digital-to-Analog Conversion
    //Do not change the codes in this area        
    
    DA2RefComp u2(clk_50M, clk_20k, speaker_out, ,1'b0, J_DA2_PIN2, J_DA2_PIN3, J_DA2_PIN4, J_DA2_PIN1,);  
    //////////////////////////////////////////////////////////////////////////////////
    
    assign LED = (note_LED == 0 && note_music_LED == 0)? speaker_out : ((note_LED == 0)? note_music_LED : note_LED);
endmodule
